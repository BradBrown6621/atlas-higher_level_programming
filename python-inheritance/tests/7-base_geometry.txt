>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> try:
...	bg.integer_validator("my_int", -1)
... except Exception as e:
...	print(e)
my_int must be greater than 0
>>> try:
...     bg.integer_validator("my_int", 0)
... except Exception as e:
...     print(e)
my_int must be greater than 0
>>> try:
...	bg.integer_validator("name", 'inf')
... except Exception as e:
...	print(e)
name must be an integer
>>> try:
...	bg.integer_validator("my_int", 'nan')
... except Exception as e:
...	print(e)
my_int must be an integer
>>> try:
...	bg.area()
... except Exception as e:
...	print(e)
area() is not implemented
>>> try:
...	bg.integer_validator()
... except Exception as e:
...	print(e)
integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> try:
...	bg.integer_validator("age")
... except Exception as e:
...	print(e)
integer_validator() missing 1 required positional argument: 'value'
>>> try:
...	bg.integer_validator("age", (4,))
... except Exception as e:
...	print(e)
age must be an integer
>>> try:
...     bg.integer_validator("my_int", True)
... except Exception as e:
...     print(e)
my_int must be an integer
>>> try:
...     bg.integer_validator("my_int", {3, 4})
... except Exception as e:
...     print(e)
my_int must be an integer
>>> try:
...     bg.integer_validator("my_int", [3])
... except Exception as e:
...     print(e)
my_int must be an integer
>>> try:
...     bg.integer_validator("my_int", None)
... except Exception as e:
...     print(e)
my_int must be an integer
